# Cursor Rules - Web Development Standards
# Reglas de c√≥digo para desarrollo web con HTML sem√°ntico, PHP, MySQL y buenas pr√°cticas

## üèóÔ∏è ESTRUCTURA DE DIRECTORIOS Y ARCHIVOS

### Organizaci√≥n de directorios:
- Usar estructura clara y l√≥gica: `/assets`, `/includes`, `/config`, `/admin`, `/public`
- Nombres de archivos en ingl√©s y kebab-case: `user-profile.php`, `product-catalog.html`
- Separar claramente archivos p√∫blicos de privados
- Mantener archivos de configuraci√≥n en directorio `/config`
- Organizar assets por tipo: `/assets/css`, `/assets/js`, `/assets/images`

### Nomenclatura de archivos:
- HTML: `index.html`, `about-us.html`, `contact-form.html`
- PHP: `database.php`, `user-authentication.php`, `product-manager.php`
- CSS: `main.css`, `responsive.css`, `admin-styles.css`
- JS: `validation.js`, `ajax-handler.js`, `ui-components.js`

## üéØ HTML SEM√ÅNTICO ESTRICTO

### Estructura sem√°ntica obligatoria:
```html
<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>P√°gina con t√≠tulo descriptivo</title>
</head>

<body>
  <header>
    <nav>
      <!-- Navegaci√≥n principal -->
    </nav>
  </header>

  <main>
    <section>
      <article>
        <!-- Contenido principal -->
      </article>
    </section>
  </main>

  <footer>
    <!-- Pie de p√°gina -->
  </footer>
</body>

</html>
```

### Uso correcto de encabezados:
- Solo UN `<h1>` por p√°gina
  - Jerarqu√≠a correcta: h1 > h2 > h3 > h4 > h5 > h6
  - No saltar niveles de encabezado
  - Usar encabezados para estructura, no para estilos

  ### Refuerzo sem√°ntico obligatorio:
  - `<strong>` para importancia sem√°ntica
    - `<em>` para √©nfasis
      - `<mark>` para texto destacado
        - `<cite>` para citas
          - `<blockquote>` para citas largas
            - `<abbr>` para abreviaciones
              - `<time>` para fechas y horas
                - `<address>` para informaci√≥n de contacto

                  ### Etiquetas sem√°nticas espec√≠ficas:
                  - `<section>`: Agrupar contenido tem√°ticamente relacionado
                    - `<article>`: Contenido independiente y autocontenido
                      - `<aside>`: Contenido relacionado pero separado
                        - `<nav>`: Navegaci√≥n principal
                          - `<header>`: Encabezado de secci√≥n o p√°gina
                            - `<footer>`: Pie de secci√≥n o p√°gina
                              - `<main>`: Contenido principal √∫nico
                                - `<figure>` y `<figcaption>`: Im√°genes con descripci√≥n

                                    ## üé® CLASES Y NOMENCLATURA EN INGL√âS

                                    ### Convenciones CSS:
                                    - Usar BEM (Block Element Modifier) o metodolog√≠a similar
                                    - Nombres descriptivos: `.product-card`, `.user-profile`, `.navigation-menu`
                                    - Estados: `.is-active`, `.is-hidden`, `.is-loading`
                                    - Responsive: `.mobile-only`, `.tablet-up`, `.desktop-only`

                                    ### Ejemplos de clases:
                                    ```css
                                    /* Componentes */
                                    .product-card { }
                                    .product-card__title { }
                                    .product-card__price { }
                                    .product-card--featured { }

                                    /* Utilidades */
                                    .text-center { }
                                    .margin-top-large { }
                                    .hidden { }
                                    .visible { }
                                    ```

                                    ## üóÑÔ∏è BASE DE DATOS MYSQL

                                    ### Dise√±o de base de datos:
                                    - Usar nombres descriptivos en ingl√©s: `users`, `product`, `orders`
                                    - Claves primarias: `id` (INT AUTO_INCREMENT)
                                    - Claves for√°neas: `user_id`, `product_id`, `order_id`
                                    - √çndices apropiados para consultas frecuentes
                                    - Normalizaci√≥n hasta 3NF como m√≠nimo

                                    ### Estructura de tablas:
                                    ```sql
                                    CREATE TABLE users (
                                    id INT PRIMARY KEY AUTO_INCREMENT,
                                    username VARCHAR(50) UNIQUE NOT NULL,
                                    email VARCHAR(100) UNIQUE NOT NULL,
                                    password_hash VARCHAR(255) NOT NULL,
                                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
                                    );
                                    ```


### Ejemplo de componente con GSAP:
```vue
<template>
  <div class="animated-component" ref="elementRef">
    <h1>{{ title }}</h1>
    <button @click="triggerAnimation">Animar</button>
  </div>
</template>

<script>
import { gsap } from 'gsap'

export default {
  name: 'AnimatedComponent',
  props: {
    title: {
      type: String,
      default: 'T√≠tulo por defecto'
    }
  },
  data() {
    return {
      isAnimating: false
    }
  },
  computed: {
    animationDuration() {
      return this.isAnimating ? 1.5 : 1
    }
  },
  methods: {
    triggerAnimation() {
      this.isAnimating = true
      gsap.to(this.$refs.elementRef, {
        scale: 1.2,
        duration: this.animationDuration,
        ease: 'power2.out',
        onComplete: () => {
          this.isAnimating = false
        }
      })
    }
  },
  mounted() {
    // Animaci√≥n inicial
    gsap.from(this.$refs.elementRef, {
      opacity: 0,
      y: 50,
      duration: 1
    })
  }
}
</script>
```

## üîß PHP Y PDO

### Uso correcto de PDO:
                                    ```php
                                    <?php
                                    class Database
                                    {
                                      private $pdo;

                                      public function __construct()
                                      {
                                        $this->pdo = new PDO(
                                          "mysql:host=localhost;dbname=database_name;charset=utf8mb4",
                                          "username",
                                          "password",
                                          [
                                            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                                            PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
                                            PDO::ATTR_EMULATE_PREPARES => false
                                          ]
                                        );
                                      }

                                      public function query($sql, $params = [])
                                      {
                                        $stmt = $this->pdo->prepare($sql);
                                        $stmt->execute($params);
                                        return $stmt;
                                      }
                                    }
                                    ?>
                                    ```

                                    ### Clases y m√©todos:
                                    - Usar Programaci√≥n Orientada a Objetos
                                    - Nombres de clases en PascalCase: `UserManager`, `ProductCatalog`
                                    - M√©todos descriptivos: `getUserById()`, `createProduct()`, `updateOrderStatus()`
                                    - Separar l√≥gica de negocio de presentaci√≥n

                                    ### Ejemplo de clase:
                                    ```php
                                    <?php
                                    class ProductManager
                                    {
                                      private $db;

                                      public function __construct(Database $db)
                                      {
                                        $this->db = $db;
                                      }

                                      public function getAllProducts()
                                      {
                                        $sql = "SELECT * FROM product WHERE active = 1 ORDER BY name";
                                        return $this->db->query($sql)->fetchAll();
                                      }

                                      public function getProductById($id)
                                      {
                                        $sql = "SELECT * FROM product WHERE id = ?";
                                        return $this->db->query($sql, [$id])->fetch();
                                      }

                                      public function createProduct($data)
                                      {
                                        $sql = "INSERT INTO product (name, description, price, category_id) VALUES (?, ?, ?, ?)";
                                        return $this->db->query($sql, [
                                          $data['name'],
                                          $data['description'],
                                          $data['price'],
                                          $data['category_id']
                                        ]);
                                      }
                                    }
                                    ?>
                                    ```

                                    ## üìù FORMULARIOS Y VALIDACI√ìN

                                    ### Estructura de formularios:
                                    ```html
                                    <form action="/process-form.php" method="POST" class="contact-form">
                                      <fieldset>
                                        <legend>Informaci√≥n de contacto</legend>

                                        <div class="form-group">
                                          <label for="name">Nombre completo</label>
                                          <input type="text" id="name" name="name" required
                                            pattern="[A-Za-z\s]{2,50}"
                                            title="Ingrese un nombre v√°lido (2-50 caracteres)">
                                        </div>

                                        <div class="form-group">
                                          <label for="email">Correo electr√≥nico</label>
                                          <input type="email" id="email" name="email" required>
                                        </div>

                                        <div class="form-group">
                                          <label for="message">Mensaje</label>
                                          <textarea id="message" name="message" rows="5" required
                                            maxlength="1000"></textarea>
                                        </div>

                                        <button type="submit" class="btn btn-primary">Enviar mensaje</button>
                                      </fieldset>
                                    </form>
                                    ```

                                    ### Validaci√≥n PHP:
                                    ```php
                                    <?php
                                    class FormValidator
                                    {
                                      public function validateContactForm($data)
                                      {
                                        $errors = [];

                                        // Validar nombre
                                        if (empty($data['name']) || strlen($data['name']) < 2) {
                                          $errors['name'] = 'El nombre es requerido y debe tener al menos 2 caracteres';
                                        }

                                        // Validar email
                                        if (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {
                                          $errors['email'] = 'Ingrese un email v√°lido';
                                        }

                                        // Validar mensaje
                                        if (empty($data['message']) || strlen($data['message']) < 10) {
                                          $errors['message'] = 'El mensaje es requerido y debe tener al menos 10 caracteres';
                                        }

                                        return $errors;
                                      }
                                    }
                                    ?>
                                    ```

                                    ## üñºÔ∏è OPTIMIZACI√ìN DE IM√ÅGENES

                                    ### Requisitos de im√°genes:
                                    - Formatos web: JPG, PNG, WebP, SVG
                                    - Tama√±os optimizados: m√°ximo 500KB por imagen
                                    - Resoluci√≥n apropiada: 72-150 DPI para web
                                    - Nombres descriptivos: `hero-banner.jpg`, `product-thumbnail.png`
                                    - Alt text obligatorio para accesibilidad

                                    ### Ejemplo de uso:
                                    ```html
                                    <img src="/assets/images/product-gallery.jpg"
                                      alt="Galer√≠a de productos de la tienda"
                                      width="800"
                                      height="600"
                                      loading="lazy"
                                      class="product-image">
                                    ```

                                    ## üéØ NAVEGACI√ìN Y FUNCIONALIDAD

                                    ### Navegaci√≥n funcional:
                                    - Men√∫ principal accesible
                                    - Breadcrumbs para p√°ginas profundas
                                    - Enlaces internos funcionando
                                    - URLs amigables y descriptivas
                                    - Estado activo en navegaci√≥n

                                    ### Ejemplo de navegaci√≥n:
                                    ```html
                                    <nav class="main-navigation" role="navigation" aria-label="Navegaci√≥n principal">
                                      <ul class="nav-list">
                                        <li class="nav-item">
                                          <a href="/" class="nav-link" aria-current="page">Inicio</a>
                                        </li>
                                        <li class="nav-item">
                                          <a href="/product" class="nav-link">Productos</a>
                                        </li>
                                        <li class="nav-item">
                                          <a href="/about" class="nav-link">Acerca de</a>
                                        </li>
                                        <li class="nav-item">
                                          <a href="/contact" class="nav-link">Contacto</a>
                                        </li>
                                      </ul>
                                    </nav>
                                    ```

                                    ## üì± RESPONSIVE DESIGN

                                    ### Media queries:
                                    ```css
                                    /* Mobile first approach */
                                    .container {
                                    width: 100%;
                                    padding: 0 15px;
                                    }

                                    /* Tablet */
                                    @media (min-width: 768px) {
                                    .container {
                                    max-width: 750px;
                                    margin: 0 auto;
                                    }
                                    }

                                    /* Desktop */
                                    @media (min-width: 1024px) {
                                    .container {
                                    max-width: 970px;
                                    }
                                    }
                                    ```

                                    ## üîç ACCESIBILIDAD

                                    ### Requisitos de accesibilidad:
                                    - Contraste de colores m√≠nimo 4.5:1
                                    - Navegaci√≥n por teclado
                                    - Textos alternativos en im√°genes
                                    - Estructura de encabezados correcta
                                    - Etiquetas en formularios
                                    - ARIA labels cuando sea necesario

                                    ## üßπ PROLIJIDAD DEL C√ìDIGO

                                    ### Indentaci√≥n y formato:
                                    - 2 espacios para indentaci√≥n
                                    - L√≠neas m√°ximo 80-120 caracteres
                                    - Espacios consistentes
                                    - Comentarios descriptivos
                                    - Nombres de variables descriptivos

                                    ### Ejemplo de c√≥digo limpio:
                                    ```php
                                    <?php
                                    /**
                                     * Clase para manejo de productos
                                     *
                                     * @author Tu Nombre
                                     * @version 1.0
                                     */
                                    class ProductHandler
                                    {
                                      private $database;
                                      private $logger;

                                      public function __construct(Database $database, Logger $logger)
                                      {
                                        $this->database = $database;
                                        $this->logger = $logger;
                                      }

                                      /**
                                       * Obtiene todos los productos activos
                                       *
                                       * @return array Lista de productos
                                       */
                                      public function getActiveProducts()
                                      {
                                        try {
                                          $sql = "SELECT * FROM product WHERE status = 'active' ORDER BY name";
                                          return $this->database->query($sql)->fetchAll();
                                        } catch (Exception $e) {
                                          $this->logger->error('Error obteniendo productos: ' . $e->getMessage());
                                          return [];
                                        }
                                      }
                                    }
                                    ?>
                                    ```

                                    ## ‚úÖ VERIFICACIONES OBLIGATORIAS

                                    ### Antes de entregar c√≥digo:
                                    1. ‚úÖ HTML v√°lido (W3C Validator)
                                    2. ‚úÖ CSS v√°lido (W3C CSS Validator)
                                    3. ‚úÖ JavaScript sin errores en consola
                                    4. ‚úÖ PHP sin errores ni warnings
                                    5. ‚úÖ Base de datos funcionando correctamente
                                    6. ‚úÖ Formularios validados y funcionando
                                    7. ‚úÖ Navegaci√≥n completamente funcional
                                    8. ‚úÖ Im√°genes optimizadas y con alt text
                                    9. ‚úÖ Responsive design en todos los dispositivos
                                    10. ‚úÖ Accesibilidad b√°sica implementada

                                    ## üöÄ COMANDOS DE VERIFICACI√ìN

                                    ```bash
                                    # Validar HTML
                                    curl -s "https://validator.w3.org/nu/?doc=https://tusitio.com" | grep -i "error\|warning"

                                    # Validar CSS
                                    curl -s "https://jigsaw.w3.org/css-validator/validator?uri=https://tusitio.com" | grep -i "error\|warning"

                                    # Verificar PHP
                                    php -l archivo.php

                                    # Verificar sintaxis SQL
                                    mysql -u usuario -p -e "SELECT 1;" database_name
                                    ```

                                    Estas reglas deben aplicarse en TODOS los archivos del proyecto para mantener consistencia y calidad del c√≥digo.
